# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  GitHubRepository:
    Type: String

  GitHubBranchName:
    Type: String
    Default: ""   # CanaryLambda below will use the repository's default branch

  GitHubLambdaAPI:
    Type: String

Resources:

################################################################
# The canary

  CanaryLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import hashlib
          import hmac
          import json
          import traceback
          import urllib2

          def get_github_secret():
            """Get plaintext for key used by GitHub to compute HMAC"""
            sm = boto3.client('secretsmanager')
            s = sm.get_secret_value(SecretId='GitHubSecret')
            return str(json.loads(s['SecretString'])[0]['Secret'])

          def gen_hmac(payload):
            h = hmac.new(get_github_secret(), payload, hashlib.sha1)
            return h.hexdigest()

          def get_github_personal_access_token():
            sm = boto3.client('secretsmanager')
            s = sm.get_secret_value(SecretId='GitHubCommitStatusPAT')
            return str(json.loads(s['SecretString'])[0]['GitHubPAT'])

          def lambda_handler(event, context):
            try:
              api = 'https://${GitHubLambdaAPI}.execute-api.${AWS::Region}.amazonaws.com/verify'

              r = urllib2.Request(
                      url='https://api.github.com/repos/${GitHubRepository}',
                      headers={'Authorization': 'token ' + get_github_personal_access_token()})
              repo_info = json.loads(urllib2.urlopen(r).read())
              default_branch = "${GitHubBranchName}" if "${GitHubBranchName}" else repo_info['default_branch']

              r = urllib2.Request(
                      url='https://api.github.com/repos/${GitHubRepository}/branches/{}'.format(
                        default_branch),
                      headers={'Authorization': 'token ' + get_github_personal_access_token()})
              HEAD = json.loads(urllib2.urlopen(r).read())['commit']['sha']

              payload = {
                  'ref': 'refs/heads/' + default_branch,
                  'repository': {
                    'name': repo_info['name'],
                    'full_name': repo_info['full_name'],
                    'id': repo_info['id']
                  },
                  'head_commit': {'id': HEAD}
                }
              print str(payload)

              r = urllib2.Request(
                      url=api,
                      headers={
                        'content-type': 'application/json',
                        'User-Agent': 'Canary',
                        'X-GitHub-Event': 'push',
                        'X-Hub-Signature': 'sha1=' + gen_hmac(json.dumps(payload))
                      },
                      data=json.dumps(payload))
              post = urllib2.urlopen(r)
              print(post.read())

            except Exception as e:
              traceback.print_exc()
              print 'Error: ' + str(e)
              raise e
      Handler: index.lambda_handler
      Role: !GetAtt CanaryLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
      MemorySize: 128

  CanaryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "canary-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubSecret-??????"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubCommitStatusPAT-??????"


################################################################
# The daily canary invocation

  DailyCanaryLambdaTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger webhook"
      ScheduleExpression: cron(0 13 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt CanaryLambda.Arn
          Id: "WebhookCanary"

  DailyCanaryLambdaEventPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CanaryLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyCanaryLambdaTriggerRule.Arn

