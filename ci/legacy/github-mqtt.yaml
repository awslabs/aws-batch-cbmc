# Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

AWSTemplateFormatVersion: 2010-09-09

Parameters:
  GitHubToken:
    Type: String

  NotificationAddress:
    Type: String

  ProjectName:
    Type: String

  GitHubRepository:
    Type: String

  SIMAddress:
    Type: String

Resources:
  SESLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "ses-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - ses:SendEmail
                Effect: Allow
                Resource: "*"

  SESLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt SESLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
      MemorySize: 128
      Code:
        ZipFile: !Sub |
          import boto3
          import json
          import os
          import traceback

          SENDER = '${NotificationAddress}'
          TO = '${SIMAddress}'

          def lambda_handler(event, context):
            ses = boto3.client('ses', region_name=os.environ['AWS_REGION'])
            try:
              subject = event['Records'][0]['Sns']['Subject']
              if not subject:
                subject = 'Pipeline error in ${AWS::AccountId}'
              message = json.loads(event['Records'][0]['Sns']['Message'])
              body = json.dumps(message, sort_keys=True, indent=2)
              ses.send_email(
                Source=SENDER,
                Destination={'ToAddresses': [TO]},
                Message={
                  'Subject': {'Data': '${ProjectName} ' + subject},
                  'Body': {
                    'Text': {'Data': body},
                    'Html': {
                      'Data': '<html><head></head><body>{}</body></html>'.format(
                        body.replace('\n', '<br>'))
                    }
                  }
                })

            except Exception as e:
              traceback.print_exc()
              print 'Error: ' + str(e)
              print 'Event: ' + str(event)
              ses.send_email(
                Source=SENDER,
                Destination={'ToAddresses': [TO]},
                Message={
                  'Subject': {'Data': 'SES Lambda ${AWS::AccountId} failed'},
                  'Body': {
                    'Text': {'Data': str(e)},
                    'Html': {
                      'Data': '<html><head></head><body>{}</body></html>'.format(e)
                    }
                  }
                })

  BatchCodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: "CBMC-batch"
      RepositoryDescription: "PicaPica-synchronized copy of gitfarm CBMC-batch"

  CoverageCodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: "CBMC-coverage"
      RepositoryDescription: "PicaPica-synchronized copy of gitfarm CBMC-coverage"

  PicaPicaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: prod.picapica.aws.internal
          Action: sts:AssumeRole
      RoleName: "picapica-role"
      Policies:
        - PolicyName: "picapica-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - codecommit:GetRepository
                  - codecommit:GitPush
                  - codecommit:UpdateDefaultBranch
                  - picapica:GetDestination
                  - picapica:PutDestination
                  - picapica:ListDestinations
                  - picapica:DeleteDestination
                Effect: Allow
                Resource:
                  - !GetAtt BatchCodeCommitRepository.Arn
                  - !Sub "arn:aws:picapica:${AWS::Region}:${AWS::AccountId}:/destinations/CBMC-batch"
                  - !GetAtt CoverageCodeCommitRepository.Arn
                  - !Sub "arn:aws:picapica:${AWS::Region}:${AWS::AccountId}:/destinations/CBMC-coverage"

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-lambda"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DockerBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "dockerbuild-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - ecr:GetAuthorizationToken
                Effect: Allow
                Resource: "*"
              - Action:
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                Effect: Allow
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/cbmc"
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]

  DockerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: cbmc
      LifecyclePolicy:
        LifecyclePolicyText: '
          {
            "rules": [ {
              "rulePriority": 10,
              "description": "remove untagged images except the latest one",
              "selection": {
                "tagStatus": "untagged",
                "countType": "imageCountMoreThan",
                "countNumber": 1
              },
              "action": {
                "type": "expire"
              }
            } ]
          }'

  DockerBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        Type: LINUX_CONTAINER
      Name: docker-build
      ServiceRole: !Ref DockerBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            build:
              commands:
                - $(aws ecr get-login --region ${AWS::Region} --no-include-email)
                - >
                  make -C docker
                  REPO=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cbmc
                  FLAGS="--build-arg UBUNTU_ARCHIVE=${AWS::Region}.ec2.archive.ubuntu.com"
                - >
                  make -C docker install
                  REPO=${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/cbmc

  UpdateLambaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "updatelambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
              - Action:
                  - lambda:UpdateFunctionCode
                  - lambda:UpdateFunctionConfiguration
                Effect: Allow
                Resource:
                  - !GetAtt InvokeBatchLambda.Arn
                  - !GetAtt BatchStatusLambda.Arn
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"

  UpdateLambda:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: LAMBDA_INVOKE_FUNCTION
            Type: PLAINTEXT
            Value: !Ref InvokeBatchLambda
          - Name: LAMBDA_STATUS_FUNCTION
            Type: PLAINTEXT
            Value: !Ref BatchStatusLambda
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: update-lambda
      ServiceRole: !Ref UpdateLambaRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - apt-get update
                - apt-get -y install python-virtualenv python-pip
            build:
              commands:
                - make -C pkg-batch BATCHDIR=..
                - >
                  aws s3 cp pkg-batch/cbmc-batch.tar.gz
                  "s3://$S3_BUCKET/package/cbmc-batch.tar.gz"
                - mv bin/cbmc-batch bin/cbmc_batch.py
                - mv bin/cbmc-status bin/cbmc_status.py
                - zip -j batch.zip bin/*
                - zip -j -g batch.zip ci/legacy/*.py
                - |
                  set -e
                  virtualenv venv
                  . venv/bin/activate
                  pip install pyyaml
                  pip install pygithub
                  pip install awscli
                  pip install backports.tempfile
                  pip install future
                  cd venv/lib/python2.7/site-packages
                  zip -g -r ../../../../batch.zip *
                  cd ../../../../
                  cp venv/bin/aws .
                  sed -i '1s@.*@#!/usr/bin/python@' aws
                  zip -g batch.zip aws
                - aws s3 cp batch.zip "s3://$S3_BUCKET/lambda-batch/batch.zip"
                - >
                  aws lambda update-function-code
                  --function-name $LAMBDA_INVOKE_FUNCTION
                  --s3-bucket $S3_BUCKET --s3-key lambda-batch/batch.zip
                - >
                  aws lambda update-function-configuration
                  --function-name $LAMBDA_INVOKE_FUNCTION
                  --handler cbmc_ci_start.lambda_handler
                - >
                  aws lambda update-function-code
                  --function-name $LAMBDA_STATUS_FUNCTION
                  --s3-bucket $S3_BUCKET --s3-key lambda-batch/batch.zip
                - >
                  aws lambda update-function-configuration
                  --function-name $LAMBDA_STATUS_FUNCTION
                  --handler cbmc_ci_end.lambda_handler
                - |
                  set -e
                  cd pkg-cbmc
                  tar czf patches.tar.gz patches
                  aws s3 cp patches.tar.gz \
                    "s3://$S3_BUCKET/package/cbmc-patches.tar.gz"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "codebuild-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !GetAtt S3Bucket.Arn
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"

  PackageViewer:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: package-viewer
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - mkdir /tmp/cbmc-viewer
                - mv * /tmp/cbmc-viewer/
                - mv /tmp/cbmc-viewer .
                - tar czf cbmc-viewer.tar.gz cbmc-viewer
                - >
                  aws s3 cp cbmc-viewer.tar.gz
                  "s3://$S3_BUCKET/package/cbmc-viewer.tar.gz"

  CBMCLinuxBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/ubuntu-base:14.04
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: S3_BUCKET
            Type: PLAINTEXT
            Value: !Ref S3Bucket
      Name: goto-cc-build
      ServiceRole: !Ref CodeBuildRole
      Cache:
        Type: S3
        Location: !Join ["/", [!GetAtt S3Bucket.Arn, "cbmc-linux-build-cache"]]
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - add-apt-repository ppa:ubuntu-toolchain-r/test -y
                - >
                  apt-key adv --keyserver hkp://keys.gnupg.net --recv-keys BA9EF27F ||
                  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA9EF27F
                - apt-get update -y
                - apt-get install -y g++-5 flex bison make git libwww-perl patch ccache
                - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 1
                - update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 1
            build:
              commands:
                - |
                  set -e
                  aws s3 cp "s3://$S3_BUCKET/package/cbmc-patches.tar.gz" patches.tar.gz
                  tar xzf patches.tar.gz
                  for p in patches/*
                  do
                    patch -p1 < $p
                  done
                - make -C src minisat2-download
                - make -C src CXX="ccache g++" -j8
                - ccache -s
            post_build:
              commands:
                - |
                  set -e
                  cd src
                  cp goto-analyzer/goto-analyzer cbmc/
                  cp goto-cc/goto-cc cbmc/
                  cp goto-instrument/goto-instrument cbmc/
                  tar czf cbmc.tar.gz \
                    cbmc/cbmc cbmc/goto-cc cbmc/goto-analyzer cbmc/goto-instrument
                  aws s3 cp cbmc.tar.gz "s3://$S3_BUCKET/package/cbmc.tar.gz"
          cache:
            paths:
            - '/var/cache/apt/**/*'
            - '/var/lib/apt/lists/**/*'
            - '/root/.ccache/**/*'

  InfrastructurePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "infrastructurepipeline-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Effect: Allow
                Resource:
                  - !GetAtt BatchCodeCommitRepository.Arn
                  - !GetAtt CoverageCodeCommitRepository.Arn
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource:
                  - !GetAtt CBMCLinuxBuild.Arn
                  - !GetAtt DockerBuild.Arn
                  - !GetAtt UpdateLambda.Arn
                  - !GetAtt PackageViewer.Arn
              - Action:
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]

  InfrastructurePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: "batch-pipeline"
      RoleArn: !GetAtt InfrastructurePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket
      Stages:
        - Name: "Source"
          Actions:
            - Name: "CBMC"
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: diffblue
                Repo: cbmc
                Branch: develop
                OAuthToken: !Ref GitHubToken
                PollForSourceChanges: True
              OutputArtifacts:
                - Name: "cbmc-src"
            - Name: "Batch-CodeCommit"
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt BatchCodeCommitRepository.Name
                BranchName: master
              OutputArtifacts:
                - Name: "batch-src"
            - Name: "Viewer-CodeCommit"
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !GetAtt CoverageCodeCommitRepository.Name
                BranchName: master
              OutputArtifacts:
                - Name: "view-src"
        - Name: "Build"
          Actions:
            - Name: "Docker-Build"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref DockerBuild
              InputArtifacts:
                - Name: "batch-src"
              RunOrder: 1
            - Name: "Update-Lambda"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref UpdateLambda
              InputArtifacts:
                - Name: "batch-src"
              RunOrder: 1
            - Name: "Package-Viewer"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref PackageViewer
              InputArtifacts:
                - Name: "view-src"
              RunOrder: 1
            - Name: "CBMC-Linux"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CBMCLinuxBuild
              InputArtifacts:
                - Name: "cbmc-src"
              RunOrder: 2

  SnsInfrastructureTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CBMC Batch Verification Infrastructure"
      TopicName: "cbmc-batch-verification-infrastructure"

  SnsInfrastructureSESLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsInfrastructureTopic
      FunctionName: !GetAtt SESLambda.Arn

  SnsInfrastructureSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SESLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SnsInfrastructureTopic

  InfrastructureEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SnsInfrastructureTopic
      Topics:
        - !Ref SnsInfrastructureTopic

  InfrastructureEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "CodePipeline failure rule"
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - "CodePipeline Action Execution State Change"
        detail:
          state:
            - FAILED
          pipeline:
            - !Ref InfrastructurePipeline
      State: ENABLED
      Targets:
        - Arn: !Ref SnsInfrastructureTopic
          Id: "InfrastructurePipelineTopic"
          InputTransformer:
            InputTemplate: !Sub '"The pipeline <state> at stage <stage> to perform <action>. Go to https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/"'
            InputPathsMap:
              state: "$.detail.state"
              stage: "$.detail.stage"
              action: "$.detail.action"

  BatchLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "batch-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                Effect: Allow
                Resource: !Join ["/", [!GetAtt S3Bucket.Arn, "*"]]
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !GetAtt S3Bucket.Arn
              - Action:
                  - batch:DescribeJobQueues
                  - batch:DescribeJobDefinitions
                  - batch:SubmitJob
                  - batch:ListJobs
                Effect: Allow
                Resource: "*"
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubSecret-??????"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubCommitStatusPAT-??????"
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"

  InvokeBatchLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def hello(world, universe):
            print "hello " + world
      Handler: index.hello
      Role: !GetAtt BatchLambdaRole.Arn
      Runtime: python2.7
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          S3_BKT: !Ref S3Bucket

  BatchStatusLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def hello(world, universe):
            print "hello " + world
      Handler: index.hello
      Role: !GetAtt BatchLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          S3_BKT: !Ref S3Bucket

  BatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Batch state change rule"
      EventPattern:
        source:
          - aws.batch
        detail-type:
          - "Batch Job State Change"
      State: ENABLED
      Targets:
        - Arn: !GetAtt BatchStatusLambda.Arn
          Id: "BatchStateChange"

  BatchEventPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BatchStatusLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BatchEventRule.Arn

  WebhookLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "webhook-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubSecret-??????"
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource: !GetAtt InvokeBatchLambda.Arn
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: "*"

  HandleWebhookLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt WebhookLambdaRole.Arn
      Runtime: python2.7
      Timeout: 30
      MemorySize: 128
      Code:
        ZipFile: !Sub |
          import boto3
          import hashlib
          import hmac
          import json
          import traceback

          def get_github_secret():
            """Get plaintext for key used by GitHub to compute HMAC"""
            sm = boto3.client('secretsmanager')
            s = sm.get_secret_value(SecretId='GitHubSecret')
            return str(json.loads(s['SecretString'])[0]['Secret'])

          def check_hmac(github_signature, payload):
            """
            Check HMAC as suggested here:
            https://developer.github.com/webhooks/securing/
            """
            h = hmac.new(get_github_secret(), payload, hashlib.sha1)
            signature = 'sha1=' + h.hexdigest()
            return hmac.compare_digest(signature, github_signature)

          def lambda_handler(event, context):
            response = {}
            try:
              event['headers'] = {k.lower(): v for k, v in event['headers'].items()}
              if not check_hmac(
                  str(event['headers']['x-hub-signature']), str(event['body'])):
                response['statusCode'] = 403
              elif event['headers']['x-github-event'] == 'ping':
                response['body'] = 'pong'
                response['statusCode'] = 200
              else:
                lc = boto3.client('lambda')
                result = lc.invoke(
                  FunctionName='${InvokeBatchLambda}',
                  InvocationType='Event',
                  Payload=json.dumps(event))
                response['statusCode'] = result['StatusCode']
            except Exception as e:
              response['statusCode'] = 500
              traceback.print_exc()
              print 'Error: ' + str(e)
              raise e

            return response

  GitHubLambdaAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "LambdaAPI"
      Description: "API provided to GitHub"

  GitHubLambdaAPIRootResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt GitHubLambdaAPI.RootResourceId
      RestApiId: !Ref GitHubLambdaAPI
      PathPart: "dummy"

  GitHubLambdaAPIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref GitHubLambdaAPIRootResource
      RestApiId: !Ref GitHubLambdaAPI
      PathPart: "{proxy+}"

  GitHubLambdaAPIRootRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !GetAtt GitHubLambdaAPI.RootResourceId
      RestApiId: !Ref GitHubLambdaAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/", !GetAtt HandleWebhookLambda.Arn, "/invocations" ] ]

  GitHubLambdaAPIRequest:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      ResourceId: !Ref GitHubLambdaAPIResource
      RestApiId: !Ref GitHubLambdaAPI
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join [ "", [ !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/", !GetAtt HandleWebhookLambda.Arn, "/invocations" ] ]

  GitHubLambdaAPIDeployment:
    DependsOn: GitHubLambdaAPIRootRequest
    DependsOn: GitHubLambdaAPIRequest
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GitHubLambdaAPI
      StageName: "verify"

  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HandleWebhookLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [ "", [ !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:", !Ref GitHubLambdaAPI, "/*" ] ]

  GitHubLambdaAPILoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "apigatewaylogging-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource: "*"

  GitHubLambdaAPIAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt GitHubLambdaAPILoggingRole.Arn

  SnsLambdaTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "CBMC Batch Lambda Failure"
      TopicName: "cbmc-batch-lambda-failure"

  SnsLambdaSESLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsLambdaTopic
      FunctionName: !GetAtt SESLambda.Arn

  SnsLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SESLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SnsLambdaTopic

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref SnsLambdaTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: "AWS/Lambda"
      Period: 60
      Statistic: Maximum
      Threshold: 0.0
      TreatMissingData: notBreaching

  LambdaEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref SnsLambdaTopic
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt LambdaErrorAlarm.Arn
      Topics:
        - !Ref SnsLambdaTopic

  SnsVerificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${ProjectName} Verification Problem"
      TopicName: "verification-problem"

  SnsVerificationSESLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsVerificationTopic
      FunctionName: !GetAtt SESLambda.Arn

  SnsVerificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SESLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SnsVerificationTopic

  VerificationErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref SnsVerificationTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: !Ref ProjectName
      Period: 60
      Statistic: Maximum
      Threshold: 0.0
      TreatMissingData: notBreaching

  VerificationFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref SnsVerificationTopic
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      MetricName: Failures
      Namespace: !Sub "${ProjectName}"
      Period: 60
      Statistic: Maximum
      Threshold: 0.0
      TreatMissingData: notBreaching

  VerificationEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: "Allow-Verification-Error-Alarm"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref SnsVerificationTopic
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt VerificationErrorAlarm.Arn
          - Sid: "Allow-Verification-Failure-Alarm"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref SnsVerificationTopic
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt VerificationFailureAlarm.Arn
      Topics:
        - !Ref SnsVerificationTopic

  CanaryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "canary-lambda-policy-${AWS::Region}"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubSecret-??????"
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:GitHubCommitStatusPAT-??????"

  CanaryLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          import hashlib
          import hmac
          import json
          import traceback
          import urllib2


          def get_github_secret():
            """Get plaintext for key used by GitHub to compute HMAC"""
            sm = boto3.client('secretsmanager')
            s = sm.get_secret_value(SecretId='GitHubSecret')
            return str(json.loads(s['SecretString'])[0]['Secret'])

          def gen_hmac(payload):
            h = hmac.new(get_github_secret(), payload, hashlib.sha1)
            return h.hexdigest()

          def get_github_personal_access_token():
            sm = boto3.client('secretsmanager')
            s = sm.get_secret_value(SecretId='GitHubCommitStatusPAT')
            return str(json.loads(s['SecretString'])[0]['GitHubPAT'])

          def lambda_handler(event, context):
            try:
              api = 'https://${GitHubLambdaAPI}.execute-api.${AWS::Region}.amazonaws.com/verify'

              r = urllib2.Request(
                      url='https://api.github.com/repos/${GitHubRepository}',
                      headers={'Authorization': 'token ' + get_github_personal_access_token()})
              repo_info = json.loads(urllib2.urlopen(r).read())
              default_branch = 'v4_beta'

              r = urllib2.Request(
                      url='https://api.github.com/repos/${GitHubRepository}/branches/{}'.format(
                        default_branch),
                      headers={'Authorization': 'token ' + get_github_personal_access_token()})
              HEAD = json.loads(urllib2.urlopen(r).read())['commit']['sha']

              payload = {
                  'ref': 'refs/heads/' + default_branch,
                  'repository': {
                    'name': repo_info['name'],
                    'full_name': repo_info['full_name'],
                    'id': repo_info['id']
                  },
                  'head_commit': {'id': HEAD}
                }
              print str(payload)

              r = urllib2.Request(
                      url=api,
                      headers={
                        'content-type': 'application/json',
                        'User-Agent': 'Canary',
                        'X-GitHub-Event': 'push',
                        'X-Hub-Signature': 'sha1=' + gen_hmac(json.dumps(payload))
                      },
                      data=json.dumps(payload))
              post = urllib2.urlopen(r)
              print(post.read())

            except Exception as e:
              traceback.print_exc()
              print 'Error: ' + str(e)
              raise e
      Handler: index.lambda_handler
      Role: !GetAtt CanaryLambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
      MemorySize: 128

  DailyCanaryLambdaTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger webhook"
      ScheduleExpression: cron(0 13 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt CanaryLambda.Arn
          Id: "WebhookCanary"

  DailyCanaryLambdaEventPolicy:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CanaryLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DailyCanaryLambdaTriggerRule.Arn

  SnsCanaryTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${ProjectName} Canary Failure"
      TopicName: !Sub "${ProjectName}-canary-failure"

  SnsCanarySESLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref SnsCanaryTopic
      FunctionName: !GetAtt SESLambda.Arn

  SnsCanarySubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt SESLambda.Arn
      Protocol: lambda
      TopicArn: !Ref SnsCanaryTopic

  CanaryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref SnsCanaryTopic
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 1
      MetricName: Attempts
      Namespace: !Ref ProjectName
      Period: 86400
      Statistic: Minimum
      Threshold: 1.0
      TreatMissingData: breaching

  CanaryEventTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: sns:Publish
            Resource: !Ref SnsCanaryTopic
            Condition:
              ArnEquals:
                "aws:SourceArn": !GetAtt CanaryAlarm.Arn
      Topics:
        - !Ref SnsCanaryTopic
